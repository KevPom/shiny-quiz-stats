"mcma3" = awesomeCheckboxGroup(
inputId = "user_answer",
label = "Wähle alle, die zutreffen:",
choices = c(question$choice_1, question$choice_2, question$choice_3),
status = "primary"
),
"mcma4" = awesomeCheckboxGroup(
inputId = "user_answer",
label = "Wähle alle, die zutreffen:",
choices = c(question$choice_1, question$choice_2, question$choice_3, question$choice_4),
status = "primary"
),
#### Text Input ----
"text" = textInput(
inputId = "user_answer",
label = "Gib hier deine Antwort ein:"
),
#### Numeric Input ----
"numeric" = numericInput(
inputId = "user_answer",
label = "Gib das Ergebnis ein (mind. 2 Nachkommastellen):",
value = NULL
)
)
}
# Server logic
server <- function(input, output, session) {
# Reactive value to track the current question number
current_question <- reactiveVal(1)
# Render current question UI
output$question_ui <- renderUI({
question <- quiz_data[current_question(), ]
quiz_ui(question)
})
# Update left sidebar with completed questions
output$left_sidebar <- renderUI({
completed_questions <- seq_len(current_question() - 1)
if (length(completed_questions) > 0) {
lapply(completed_questions, function(i) {
actionButton(inputId = paste0("view_q", i), label = paste("Q", i))
})
}
})
# Display right sidebar with tips or hints
output$right_sidebar <- renderUI({
question <- quiz_data[current_question(), ]
tagList(
actionButton("hint_button", "Tipp zeigen"),
actionButton("wrong_answer_button", "Falsch Antwort Tipp"),
textOutput("tip_display")
)
})
# Show the appropriate tip in the right sidebar
observeEvent(input$hint_button, {
question <- quiz_data[current_question(), ]
output$tip_display <- renderText({ question$start_tip })
})
observeEvent(input$wrong_answer_button, {
question <- quiz_data[current_question(), ]
output$tip_display <- renderText({ question$wrong_tip })
})
# Check answer and move to the next question if correct
observeEvent(input$submit_button, {
question <- quiz_data[current_question(), ]
# Get the selected answer
user_answer <- input$user_answer
# Check if the answer is correct
if (user_answer == question$solution) {
# Move to the next question if the answer is correct
current_question(current_question() + 1)
} else {
# Display wrong answer tip if the answer is incorrect
output$tip_display <- renderText({ question$wrong_tip })
}
})
}
# UI Layout using page_sidebar() from bslib
ui <- page_fluid(
page_sidebar(
sidebar = div(
class = "sidebar",
h3("Fragen"),
uiOutput("left_sidebar")
),
main = div(
class = "main-content",
h2("Aktuelle Frage"),
uiOutput("question_ui"),
actionButton("submit_button", "Antwort überprüfen")
),
right = div(
class = "right-sidebar",
h3("Tipp und Hinweise"),
uiOutput("right_sidebar")
),
min_height = "100vh"
)
)
library(bslib)
?bslib()
install.packages("bslib")
?bslib
??bslib
library(shiny)
library(shinyWidgets)
library(bslib)
# Sample quiz data (Replace with your actual data)
quiz_data <- data.frame(
main_text = c("Was ist 2+2?", "Was ist die Hauptstadt von Frankreich?"),
type = c("mcsa4", "mcsa3"),
choice_1 = c("3", "Berlin"),
choice_2 = c("4", "Paris"),
choice_3 = c("5", "Madrid"),
choice_4 = c("6", "Rom"),
solution = c("4", "Paris"),
start_tip = c("Denk an einfache Mathematik!", "Denk an bekannte europäische Städte."),
wrong_tip = c("Versuch es nochmal!", "Falsch. Versuche eine andere Stadt."),
question_image = c("", ""),
question_codechunk = c("", "")
)
# Function to apply the appropriate questionnaire UI for a given question
quiz_ui <- function(question) {
switch(question$type,
#### Multiple Choice (Single Answer) ----
"mcsa3" = awesomeRadio(
inputId = "user_answer",
label = "Wähle genau eins:",
choices = c(question$choice_1, question$choice_2, question$choice_3),
selected = NULL,
status = "primary"
),
"mcsa4" = awesomeRadio(
inputId = "user_answer",
label = "Wähle genau eins:",
choices = c(question$choice_1, question$choice_2, question$choice_3, question$choice_4),
selected = NULL,
status = "primary"
),
#### Multiple Selection (Multiple Answers) ----
"mcma3" = awesomeCheckboxGroup(
inputId = "user_answer",
label = "Wähle alle, die zutreffen:",
choices = c(question$choice_1, question$choice_2, question$choice_3),
status = "primary"
),
"mcma4" = awesomeCheckboxGroup(
inputId = "user_answer",
label = "Wähle alle, die zutreffen:",
choices = c(question$choice_1, question$choice_2, question$choice_3, question$choice_4),
status = "primary"
),
#### Text Input ----
"text" = textInput(
inputId = "user_answer",
label = "Gib hier deine Antwort ein:"
),
#### Numeric Input ----
"numeric" = numericInput(
inputId = "user_answer",
label = "Gib das Ergebnis ein (mind. 2 Nachkommastellen):",
value = NULL
)
)
}
# Server logic
server <- function(input, output, session) {
# Reactive value to track the current question number
current_question <- reactiveVal(1)
# Render current question UI
output$question_ui <- renderUI({
question <- quiz_data[current_question(), ]
quiz_ui(question)
})
# Update left sidebar with completed questions
output$left_sidebar <- renderUI({
completed_questions <- seq_len(current_question() - 1)
if (length(completed_questions) > 0) {
lapply(completed_questions, function(i) {
actionButton(inputId = paste0("view_q", i), label = paste("Q", i))
})
}
})
# Display right sidebar with tips or hints
output$right_sidebar <- renderUI({
question <- quiz_data[current_question(), ]
tagList(
actionButton("hint_button", "Tipp zeigen"),
actionButton("wrong_answer_button", "Falsch Antwort Tipp"),
textOutput("tip_display")
)
})
# Show the appropriate tip in the right sidebar
observeEvent(input$hint_button, {
question <- quiz_data[current_question(), ]
output$tip_display <- renderText({ question$start_tip })
})
observeEvent(input$wrong_answer_button, {
question <- quiz_data[current_question(), ]
output$tip_display <- renderText({ question$wrong_tip })
})
# Check answer and move to the next question if correct
observeEvent(input$submit_button, {
question <- quiz_data[current_question(), ]
# Get the selected answer
user_answer <- input$user_answer
# Check if the answer is correct
if (user_answer == question$solution) {
# Move to the next question if the answer is correct
current_question(current_question() + 1)
} else {
# Display wrong answer tip if the answer is incorrect
output$tip_display <- renderText({ question$wrong_tip })
}
})
}
# UI Layout using page_sidebar() from bslib
ui <- page_fluid(
page_sidebar(
sidebar = div(
class = "sidebar",
h3("Fragen"),
uiOutput("left_sidebar")
),
main = div(
class = "main-content",
h2("Aktuelle Frage"),
uiOutput("question_ui"),
actionButton("submit_button", "Antwort überprüfen")
),
right = div(
class = "right-sidebar",
h3("Tipp und Hinweise"),
uiOutput("right_sidebar")
),
min_height = "100vh"
)
)
install.packages("bslib")
library(shiny)
library(shinyWidgets)
library(bslib)
# Sample quiz data (Replace with your actual data)
quiz_data <- data.frame(
main_text = c("Was ist 2+2?", "Was ist die Hauptstadt von Frankreich?"),
type = c("mcsa4", "mcsa3"),
choice_1 = c("3", "Berlin"),
choice_2 = c("4", "Paris"),
choice_3 = c("5", "Madrid"),
choice_4 = c("6", "Rom"),
solution = c("4", "Paris"),
start_tip = c("Denk an einfache Mathematik!", "Denk an bekannte europäische Städte."),
wrong_tip = c("Versuch es nochmal!", "Falsch. Versuche eine andere Stadt."),
question_image = c("", ""),
question_codechunk = c("", "")
)
# Function to apply the appropriate questionnaire UI for a given question
quiz_ui <- function(question) {
switch(question$type,
#### Multiple Choice (Single Answer) ----
"mcsa3" = awesomeRadio(
inputId = "user_answer",
label = "Wähle genau eins:",
choices = c(question$choice_1, question$choice_2, question$choice_3),
selected = NULL,
status = "primary"
),
"mcsa4" = awesomeRadio(
inputId = "user_answer",
label = "Wähle genau eins:",
choices = c(question$choice_1, question$choice_2, question$choice_3, question$choice_4),
selected = NULL,
status = "primary"
),
#### Multiple Selection (Multiple Answers) ----
"mcma3" = awesomeCheckboxGroup(
inputId = "user_answer",
label = "Wähle alle, die zutreffen:",
choices = c(question$choice_1, question$choice_2, question$choice_3),
status = "primary"
),
"mcma4" = awesomeCheckboxGroup(
inputId = "user_answer",
label = "Wähle alle, die zutreffen:",
choices = c(question$choice_1, question$choice_2, question$choice_3, question$choice_4),
status = "primary"
),
#### Text Input ----
"text" = textInput(
inputId = "user_answer",
label = "Gib hier deine Antwort ein:"
),
#### Numeric Input ----
"numeric" = numericInput(
inputId = "user_answer",
label = "Gib das Ergebnis ein (mind. 2 Nachkommastellen):",
value = NULL
)
)
}
# Server logic
server <- function(input, output, session) {
# Reactive value to track the current question number
current_question <- reactiveVal(1)
# Render current question UI
output$question_ui <- renderUI({
question <- quiz_data[current_question(), ]
quiz_ui(question)
})
# Update left sidebar with completed questions
output$left_sidebar <- renderUI({
completed_questions <- seq_len(current_question() - 1)
if (length(completed_questions) > 0) {
lapply(completed_questions, function(i) {
actionButton(inputId = paste0("view_q", i), label = paste("Q", i))
})
}
})
# Display right sidebar with tips or hints
output$right_sidebar <- renderUI({
question <- quiz_data[current_question(), ]
tagList(
actionButton("hint_button", "Tipp zeigen"),
actionButton("wrong_answer_button", "Falsch Antwort Tipp"),
textOutput("tip_display")
)
})
# Show the appropriate tip in the right sidebar
observeEvent(input$hint_button, {
question <- quiz_data[current_question(), ]
output$tip_display <- renderText({ question$start_tip })
})
observeEvent(input$wrong_answer_button, {
question <- quiz_data[current_question(), ]
output$tip_display <- renderText({ question$wrong_tip })
})
# Check answer and move to the next question if correct
observeEvent(input$submit_button, {
question <- quiz_data[current_question(), ]
# Get the selected answer
user_answer <- input$user_answer
# Check if the answer is correct
if (user_answer == question$solution) {
# Move to the next question if the answer is correct
current_question(current_question() + 1)
} else {
# Display wrong answer tip if the answer is incorrect
output$tip_display <- renderText({ question$wrong_tip })
}
})
}
# UI Layout using page_sidebar() from bslib
ui <- page_fluid(
page_sidebar(
sidebar = div(
class = "sidebar",
h3("Fragen"),
uiOutput("left_sidebar")
),
main = div(
class = "main-content",
h2("Aktuelle Frage"),
uiOutput("question_ui"),
actionButton("submit_button", "Antwort überprüfen")
),
right = div(
class = "right-sidebar",
h3("Tipp und Hinweise"),
uiOutput("right_sidebar")
),
min_height = "100vh"
)
)
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyWidgets)
library(bslib)
# Sample quiz data (Replace with your actual data)
quiz_data <- data.frame(
main_text = c("Was ist 2+2?", "Was ist die Hauptstadt von Frankreich?"),
type = c("mcsa4", "mcsa3"),
choice_1 = c("3", "Berlin"),
choice_2 = c("4", "Paris"),
choice_3 = c("5", "Madrid"),
choice_4 = c("6", "Rom"),
solution = c("4", "Paris"),
start_tip = c("Denk an einfache Mathematik!", "Denk an bekannte europäische Städte."),
wrong_tip = c("Versuch es nochmal!", "Falsch. Versuche eine andere Stadt."),
question_image = c("", ""),
question_codechunk = c("", "")
)
# Function to apply the appropriate questionnaire UI for a given question
quiz_ui <- function(question) {
switch(question$type,
#### Multiple Choice (Single Answer) ----
"mcsa3" = awesomeRadio(
inputId = "user_answer",
label = "Wähle genau eins:",
choices = c(question$choice_1, question$choice_2, question$choice_3),
selected = NULL,
status = "primary"
),
"mcsa4" = awesomeRadio(
inputId = "user_answer",
label = "Wähle genau eins:",
choices = c(question$choice_1, question$choice_2, question$choice_3, question$choice_4),
selected = NULL,
status = "primary"
),
#### Multiple Selection (Multiple Answers) ----
"mcma3" = awesomeCheckboxGroup(
inputId = "user_answer",
label = "Wähle alle, die zutreffen:",
choices = c(question$choice_1, question$choice_2, question$choice_3),
status = "primary"
),
"mcma4" = awesomeCheckboxGroup(
inputId = "user_answer",
label = "Wähle alle, die zutreffen:",
choices = c(question$choice_1, question$choice_2, question$choice_3, question$choice_4),
status = "primary"
),
#### Text Input ----
"text" = textInput(
inputId = "user_answer",
label = "Gib hier deine Antwort ein:"
),
#### Numeric Input ----
"numeric" = numericInput(
inputId = "user_answer",
label = "Gib das Ergebnis ein (mind. 2 Nachkommastellen):",
value = NULL
)
)
}
# Server logic
server <- function(input, output, session) {
# Reactive value to track the current question number
current_question <- reactiveVal(1)
# Render current question UI
output$question_ui <- renderUI({
question <- quiz_data[current_question(), ]
quiz_ui(question)
})
# Update left sidebar with completed questions
output$left_sidebar <- renderUI({
completed_questions <- seq_len(current_question() - 1)
if (length(completed_questions) > 0) {
lapply(completed_questions, function(i) {
actionButton(inputId = paste0("view_q", i), label = paste("Q", i))
})
} else {
"Noch keine Fragen beantwortet"
}
})
# Display right sidebar with tips or hints
output$right_sidebar <- renderUI({
question <- quiz_data[current_question(), ]
tagList(
actionButton("hint_button", "Tipp zeigen"),
actionButton("wrong_answer_button", "Falsch Antwort Tipp"),
textOutput("tip_display")
)
})
# Show the appropriate tip in the right sidebar
observeEvent(input$hint_button, {
question <- quiz_data[current_question(), ]
output$tip_display <- renderText({ question$start_tip })
})
observeEvent(input$wrong_answer_button, {
question <- quiz_data[current_question(), ]
output$tip_display <- renderText({ question$wrong_tip })
})
# Check answer and move to the next question if correct
observeEvent(input$submit_button, {
question <- quiz_data[current_question(), ]
# Get the selected answer
user_answer <- input$user_answer
# Check if the answer is correct
if (user_answer == question$solution) {
# Move to the next question if the answer is correct
current_question(current_question() + 1)
} else {
# Display wrong answer tip if the answer is incorrect
output$tip_display <- renderText({ question$wrong_tip })
}
})
}
# UI Layout using page_sidebar() from bslib
ui <- page_fluid(
page_sidebar(
sidebar = div(
class = "sidebar",
h3("Fragen"),
uiOutput("left_sidebar")  # Populate with previous questions
),
main = div(
class = "main-content",
h2("Aktuelle Frage"),
uiOutput("question_ui"),  # Dynamically render the current question UI
actionButton("submit_button", "Antwort überprüfen")  # Submit button
),
right = div(
class = "right-sidebar",
h3("Tipp und Hinweise"),
uiOutput("right_sidebar")  # Dynamically render tips UI
),
min_height = "100vh"
)
)
# Run the app
shinyApp(ui = ui, server = server)
